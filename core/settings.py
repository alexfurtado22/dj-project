"""
Django settings for core project.

Generated by 'django-admin startproject' using Django 5.2.7.

For more information on this file, see
https://docs.djangoproject.com/en/5.2/topics/settings/

For the full list of settings and their values, see
https://docs.djangoproject.com/en/5.2/ref/settings/
"""

import os
from pathlib import Path
import environ  # <-- Import django-environ
from datetime import timedelta

# Build paths inside the project like this: BASE_DIR / 'subdir'.
BASE_DIR = Path(__file__).resolve().parent.parent

# 1. Initialize the django-environ parser
env = environ.Env(DEBUG=(bool, False))  # Set default types
# 2. Load .env file (the base file)
# We use the class method `environ.Env.read_env`
environ.Env.read_env(BASE_DIR / ".env")
# 3. Get the ENVIRONMENT var (which should be in your base .env)
# We use our 'env' instance to parse it
ENVIRONMENT = env("ENVIRONMENT", default="local").strip().lower()
# 4. Load the environment-specific override file
# This is your exact same logic, just using read_env
if ENVIRONMENT == "local":
    environ.Env.read_env(BASE_DIR / ".env.local", override=True)
elif ENVIRONMENT == "prod":
    environ.Env.read_env(BASE_DIR / ".env.docker", override=True)


# ==============================================================================
# SECURITY & CORE CONFIGURATION
# ==============================================================================

# Now, you just use env() to parse the loaded variables.
# It's much cleaner!

# env() will raise an error if SECRET_KEY is not found
SECRET_KEY = env("SECRET_KEY")

# env.bool() will read "True" or "False" and convert to a boolean
DEBUG = env.bool("DEBUG")

# env.list() handles all the splitting and stripping
ALLOWED_HOSTS = env.list(
    "ALLOWED_HOSTS",
    default=["127.0.0.1", "localhost"] if ENVIRONMENT == "local" else [],
)

# CORS
CORS_ALLOWED_ORIGINS = env.list("CORS_ALLOWED_ORIGINS", default=[])

if ENVIRONMENT == "local" and not CORS_ALLOWED_ORIGINS:
    CORS_ALLOW_ALL_origins = True
    CORS_ALLOW_CREDENTIALS = True
else:
    if ENVIRONMENT == "prod" and not CORS_ALLOWED_ORIGINS:
        raise ValueError("CORS_ALLOWED_ORIGINS must be set in production!")
    CORS_ALLOW_CREDENTIALS = True

# CSRF TRUSTED ORIGINS
local_csrf_origins = [
    "http://127.0.0.1:5173",
    "http://localhost:5173",
    "http://127.0.0.1:3000",
    "http://localhost:3000",
]
CSRF_TRUSTED_ORIGINS = env.list(
    "CSRF_TRUSTED_ORIGINS", default=local_csrf_origins if ENVIRONMENT == "local" else []
)


# Application definition

INSTALLED_APPS = [
    "django.contrib.admin",
    "django.contrib.auth",
    "django.contrib.contenttypes",
    "django.contrib.sessions",
    "django.contrib.messages",
    "django.contrib.staticfiles",
    "useraccount.apps.UseraccountConfig",
    "allauth",
    "allauth.account",
    "allauth.socialaccount",
]

MIDDLEWARE = [
    "django.middleware.security.SecurityMiddleware",
    "django.contrib.sessions.middleware.SessionMiddleware",
    "django.middleware.common.CommonMiddleware",
    "django.middleware.csrf.CsrfViewMiddleware",
    "django.contrib.auth.middleware.AuthenticationMiddleware",
    "django.contrib.messages.middleware.MessageMiddleware",
    "django.middleware.clickjacking.XFrameOptionsMiddleware",
    "allauth.account.middleware.AccountMiddleware",
]

ROOT_URLCONF = "core.urls"

TEMPLATES = [
    {
        "BACKEND": "django.template.backends.django.DjangoTemplates",
        "DIRS": [],
        "APP_DIRS": True,
        "OPTIONS": {
            "context_processors": [
                "django.template.context_processors.request",
                "django.contrib.auth.context_processors.auth",
                "django.contrib.messages.context_processors.messages",
            ],
        },
    },
]

WSGI_APPLICATION = "core.wsgi.application"


# Database
# https://docs.djangoproject.com/en/5.2/ref/settings/#databases

# This is the CORRECT way
DATABASES = {"default": env.db()}  # Let env.db() parse the DATABASE_URL

# Now, add your extra settings to the dictionary it created
DATABASES["default"]["CONN_MAX_AGE"] = 600
DATABASES["default"]["SSL_REQUIRE"] = ENVIRONMENT == "prod"

# ==============================================================================
# AUTHENTICATION & API CONFIGURATION
# ==============================================================================
SITE_ID = 1
AUTH_USER_MODEL = "useraccount.UserProfile"
AUTHENTICATION_BACKENDS = [
    "django.contrib.auth.backends.ModelBackend",
    "allauth.account.auth_backends.AuthenticationBackend",
]

ACCOUNT_LOGIN_METHODS = {"email", "username"}
ACCOUNT_SIGNUP_FIELDS = ["email*", "username*", "password1*", "password2*"]
ACCOUNT_EMAIL_VERIFICATION = "none"


# Password validation
# https://docs.djangoproject.com/en/5.2/ref/settings/#auth-password-validators

AUTH_PASSWORD_VALIDATORS = [
    {
        "NAME": "django.contrib.auth.password_validation.UserAttributeSimilarityValidator",
    },
    {
        "NAME": "django.contrib.auth.password_validation.MinimumLengthValidator",
    },
    {
        "NAME": "django.contrib.auth.password_validation.CommonPasswordValidator",
    },
    {
        "NAME": "django.contrib.auth.password_validation.NumericPasswordValidator",
    },
]


# Internationalization
# https://docs.djangoproject.com/en/5.2/topics/i18n/

LANGUAGE_CODE = "en-us"

TIME_ZONE = "UTC"

USE_I18N = True

USE_TZ = True


# Static files (CSS, JavaScript, Images)
# https://docs.djangoproject.com/en/5.2/howto/static-files/

STATIC_URL = "static/"
STATIC_ROOT = BASE_DIR / "staticfiles"
MEDIA_URL = "media/"
MEDIA_ROOT = BASE_DIR / "media"

# Default primary key field type
# https://docs.djangoproject.com/en/5.2/ref/settings/#default-auto-field

DEFAULT_AUTO_FIELD = "django.db.models.BigAutoField"
